//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PublicProfileDto: APIModel {

    public var activated: Bool?

    public var activatedTeams: Bool?

    public var active: Bool?

    public var admin: Bool?

    public var at: Bool?

    public var business: String?

    public var businessCustomer: Bool?

    public var city: String?

    public var country: String?

    public var countryName: String?

    public var currency: String?

    public var displayName: String?

    public var email: String?

    public var eu: Bool?

    public var euCustomer: Bool?

    public var expired: Bool?

    public var expires: Int?

    public var firstname: String?

    public var gdprConsent: Bool?

    public var imageUrl: String?

    public var inactive: Bool?

    public var includeTaxForBusiness: Bool?

    public var initials: String?

    public var invited: Bool?

    public var invoicePayment: Bool?

    public var language: String?

    public var lastUpdate: Int?

    public var lastname: String?

    public var licenseHolder: Bool?

    public var licenseQuantity: Int?

    public var member: Bool?

    public var members: Int?

    public var monthly: Bool?

    public var newsletter: Bool?

    public var payPalPayment: Bool?

    public var paymentOption: String?

    public var pending: Bool?

    public var permission: Int?

    public var plan: Int?

    public var plus: Bool?

    public var pro: Bool?

    public var product: String?

    public var state: String?

    public var status: Int?

    public var street: String?

    public var stripePayment: Bool?

    public var subscriptionActive: Bool?

    public var subscriptionCancelled: Bool?

    public var subscriptionInactive: Bool?

    public var taxId: String?

    public var trial: Bool?

    public var user: String?

    public var valid: Bool?

    public var validAndActivated: Bool?

    public var validProfile: Bool?

    public var yearly: Bool?

    public var zip: String?

    public init(activated: Bool? = nil, activatedTeams: Bool? = nil, active: Bool? = nil, admin: Bool? = nil, at: Bool? = nil, business: String? = nil, businessCustomer: Bool? = nil, city: String? = nil, country: String? = nil, countryName: String? = nil, currency: String? = nil, displayName: String? = nil, email: String? = nil, eu: Bool? = nil, euCustomer: Bool? = nil, expired: Bool? = nil, expires: Int? = nil, firstname: String? = nil, gdprConsent: Bool? = nil, imageUrl: String? = nil, inactive: Bool? = nil, includeTaxForBusiness: Bool? = nil, initials: String? = nil, invited: Bool? = nil, invoicePayment: Bool? = nil, language: String? = nil, lastUpdate: Int? = nil, lastname: String? = nil, licenseHolder: Bool? = nil, licenseQuantity: Int? = nil, member: Bool? = nil, members: Int? = nil, monthly: Bool? = nil, newsletter: Bool? = nil, payPalPayment: Bool? = nil, paymentOption: String? = nil, pending: Bool? = nil, permission: Int? = nil, plan: Int? = nil, plus: Bool? = nil, pro: Bool? = nil, product: String? = nil, state: String? = nil, status: Int? = nil, street: String? = nil, stripePayment: Bool? = nil, subscriptionActive: Bool? = nil, subscriptionCancelled: Bool? = nil, subscriptionInactive: Bool? = nil, taxId: String? = nil, trial: Bool? = nil, user: String? = nil, valid: Bool? = nil, validAndActivated: Bool? = nil, validProfile: Bool? = nil, yearly: Bool? = nil, zip: String? = nil) {
        self.activated = activated
        self.activatedTeams = activatedTeams
        self.active = active
        self.admin = admin
        self.at = at
        self.business = business
        self.businessCustomer = businessCustomer
        self.city = city
        self.country = country
        self.countryName = countryName
        self.currency = currency
        self.displayName = displayName
        self.email = email
        self.eu = eu
        self.euCustomer = euCustomer
        self.expired = expired
        self.expires = expires
        self.firstname = firstname
        self.gdprConsent = gdprConsent
        self.imageUrl = imageUrl
        self.inactive = inactive
        self.includeTaxForBusiness = includeTaxForBusiness
        self.initials = initials
        self.invited = invited
        self.invoicePayment = invoicePayment
        self.language = language
        self.lastUpdate = lastUpdate
        self.lastname = lastname
        self.licenseHolder = licenseHolder
        self.licenseQuantity = licenseQuantity
        self.member = member
        self.members = members
        self.monthly = monthly
        self.newsletter = newsletter
        self.payPalPayment = payPalPayment
        self.paymentOption = paymentOption
        self.pending = pending
        self.permission = permission
        self.plan = plan
        self.plus = plus
        self.pro = pro
        self.product = product
        self.state = state
        self.status = status
        self.street = street
        self.stripePayment = stripePayment
        self.subscriptionActive = subscriptionActive
        self.subscriptionCancelled = subscriptionCancelled
        self.subscriptionInactive = subscriptionInactive
        self.taxId = taxId
        self.trial = trial
        self.user = user
        self.valid = valid
        self.validAndActivated = validAndActivated
        self.validProfile = validProfile
        self.yearly = yearly
        self.zip = zip
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activated = try container.decodeIfPresent("activated")
        activatedTeams = try container.decodeIfPresent("activatedTeams")
        active = try container.decodeIfPresent("active")
        admin = try container.decodeIfPresent("admin")
        at = try container.decodeIfPresent("at")
        business = try container.decodeIfPresent("business")
        businessCustomer = try container.decodeIfPresent("businessCustomer")
        city = try container.decodeIfPresent("city")
        country = try container.decodeIfPresent("country")
        countryName = try container.decodeIfPresent("countryName")
        currency = try container.decodeIfPresent("currency")
        displayName = try container.decodeIfPresent("displayName")
        email = try container.decodeIfPresent("email")
        eu = try container.decodeIfPresent("eu")
        euCustomer = try container.decodeIfPresent("euCustomer")
        expired = try container.decodeIfPresent("expired")
        expires = try container.decodeIfPresent("expires")
        firstname = try container.decodeIfPresent("firstname")
        gdprConsent = try container.decodeIfPresent("gdprConsent")
        imageUrl = try container.decodeIfPresent("imageUrl")
        inactive = try container.decodeIfPresent("inactive")
        includeTaxForBusiness = try container.decodeIfPresent("includeTaxForBusiness")
        initials = try container.decodeIfPresent("initials")
        invited = try container.decodeIfPresent("invited")
        invoicePayment = try container.decodeIfPresent("invoicePayment")
        language = try container.decodeIfPresent("language")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        lastname = try container.decodeIfPresent("lastname")
        licenseHolder = try container.decodeIfPresent("licenseHolder")
        licenseQuantity = try container.decodeIfPresent("licenseQuantity")
        member = try container.decodeIfPresent("member")
        members = try container.decodeIfPresent("members")
        monthly = try container.decodeIfPresent("monthly")
        newsletter = try container.decodeIfPresent("newsletter")
        payPalPayment = try container.decodeIfPresent("payPalPayment")
        paymentOption = try container.decodeIfPresent("paymentOption")
        pending = try container.decodeIfPresent("pending")
        permission = try container.decodeIfPresent("permission")
        plan = try container.decodeIfPresent("plan")
        plus = try container.decodeIfPresent("plus")
        pro = try container.decodeIfPresent("pro")
        product = try container.decodeIfPresent("product")
        state = try container.decodeIfPresent("state")
        status = try container.decodeIfPresent("status")
        street = try container.decodeIfPresent("street")
        stripePayment = try container.decodeIfPresent("stripePayment")
        subscriptionActive = try container.decodeIfPresent("subscriptionActive")
        subscriptionCancelled = try container.decodeIfPresent("subscriptionCancelled")
        subscriptionInactive = try container.decodeIfPresent("subscriptionInactive")
        taxId = try container.decodeIfPresent("taxId")
        trial = try container.decodeIfPresent("trial")
        user = try container.decodeIfPresent("user")
        valid = try container.decodeIfPresent("valid")
        validAndActivated = try container.decodeIfPresent("validAndActivated")
        validProfile = try container.decodeIfPresent("validProfile")
        yearly = try container.decodeIfPresent("yearly")
        zip = try container.decodeIfPresent("zip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(activatedTeams, forKey: "activatedTeams")
        try container.encodeIfPresent(active, forKey: "active")
        try container.encodeIfPresent(admin, forKey: "admin")
        try container.encodeIfPresent(at, forKey: "at")
        try container.encodeIfPresent(business, forKey: "business")
        try container.encodeIfPresent(businessCustomer, forKey: "businessCustomer")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(countryName, forKey: "countryName")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(eu, forKey: "eu")
        try container.encodeIfPresent(euCustomer, forKey: "euCustomer")
        try container.encodeIfPresent(expired, forKey: "expired")
        try container.encodeIfPresent(expires, forKey: "expires")
        try container.encodeIfPresent(firstname, forKey: "firstname")
        try container.encodeIfPresent(gdprConsent, forKey: "gdprConsent")
        try container.encodeIfPresent(imageUrl, forKey: "imageUrl")
        try container.encodeIfPresent(inactive, forKey: "inactive")
        try container.encodeIfPresent(includeTaxForBusiness, forKey: "includeTaxForBusiness")
        try container.encodeIfPresent(initials, forKey: "initials")
        try container.encodeIfPresent(invited, forKey: "invited")
        try container.encodeIfPresent(invoicePayment, forKey: "invoicePayment")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(lastname, forKey: "lastname")
        try container.encodeIfPresent(licenseHolder, forKey: "licenseHolder")
        try container.encodeIfPresent(licenseQuantity, forKey: "licenseQuantity")
        try container.encodeIfPresent(member, forKey: "member")
        try container.encodeIfPresent(members, forKey: "members")
        try container.encodeIfPresent(monthly, forKey: "monthly")
        try container.encodeIfPresent(newsletter, forKey: "newsletter")
        try container.encodeIfPresent(payPalPayment, forKey: "payPalPayment")
        try container.encodeIfPresent(paymentOption, forKey: "paymentOption")
        try container.encodeIfPresent(pending, forKey: "pending")
        try container.encodeIfPresent(permission, forKey: "permission")
        try container.encodeIfPresent(plan, forKey: "plan")
        try container.encodeIfPresent(plus, forKey: "plus")
        try container.encodeIfPresent(pro, forKey: "pro")
        try container.encodeIfPresent(product, forKey: "product")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(street, forKey: "street")
        try container.encodeIfPresent(stripePayment, forKey: "stripePayment")
        try container.encodeIfPresent(subscriptionActive, forKey: "subscriptionActive")
        try container.encodeIfPresent(subscriptionCancelled, forKey: "subscriptionCancelled")
        try container.encodeIfPresent(subscriptionInactive, forKey: "subscriptionInactive")
        try container.encodeIfPresent(taxId, forKey: "taxId")
        try container.encodeIfPresent(trial, forKey: "trial")
        try container.encodeIfPresent(user, forKey: "user")
        try container.encodeIfPresent(valid, forKey: "valid")
        try container.encodeIfPresent(validAndActivated, forKey: "validAndActivated")
        try container.encodeIfPresent(validProfile, forKey: "validProfile")
        try container.encodeIfPresent(yearly, forKey: "yearly")
        try container.encodeIfPresent(zip, forKey: "zip")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PublicProfileDto else { return false }
      guard self.activated == object.activated else { return false }
      guard self.activatedTeams == object.activatedTeams else { return false }
      guard self.active == object.active else { return false }
      guard self.admin == object.admin else { return false }
      guard self.at == object.at else { return false }
      guard self.business == object.business else { return false }
      guard self.businessCustomer == object.businessCustomer else { return false }
      guard self.city == object.city else { return false }
      guard self.country == object.country else { return false }
      guard self.countryName == object.countryName else { return false }
      guard self.currency == object.currency else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.email == object.email else { return false }
      guard self.eu == object.eu else { return false }
      guard self.euCustomer == object.euCustomer else { return false }
      guard self.expired == object.expired else { return false }
      guard self.expires == object.expires else { return false }
      guard self.firstname == object.firstname else { return false }
      guard self.gdprConsent == object.gdprConsent else { return false }
      guard self.imageUrl == object.imageUrl else { return false }
      guard self.inactive == object.inactive else { return false }
      guard self.includeTaxForBusiness == object.includeTaxForBusiness else { return false }
      guard self.initials == object.initials else { return false }
      guard self.invited == object.invited else { return false }
      guard self.invoicePayment == object.invoicePayment else { return false }
      guard self.language == object.language else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.lastname == object.lastname else { return false }
      guard self.licenseHolder == object.licenseHolder else { return false }
      guard self.licenseQuantity == object.licenseQuantity else { return false }
      guard self.member == object.member else { return false }
      guard self.members == object.members else { return false }
      guard self.monthly == object.monthly else { return false }
      guard self.newsletter == object.newsletter else { return false }
      guard self.payPalPayment == object.payPalPayment else { return false }
      guard self.paymentOption == object.paymentOption else { return false }
      guard self.pending == object.pending else { return false }
      guard self.permission == object.permission else { return false }
      guard self.plan == object.plan else { return false }
      guard self.plus == object.plus else { return false }
      guard self.pro == object.pro else { return false }
      guard self.product == object.product else { return false }
      guard self.state == object.state else { return false }
      guard self.status == object.status else { return false }
      guard self.street == object.street else { return false }
      guard self.stripePayment == object.stripePayment else { return false }
      guard self.subscriptionActive == object.subscriptionActive else { return false }
      guard self.subscriptionCancelled == object.subscriptionCancelled else { return false }
      guard self.subscriptionInactive == object.subscriptionInactive else { return false }
      guard self.taxId == object.taxId else { return false }
      guard self.trial == object.trial else { return false }
      guard self.user == object.user else { return false }
      guard self.valid == object.valid else { return false }
      guard self.validAndActivated == object.validAndActivated else { return false }
      guard self.validProfile == object.validProfile else { return false }
      guard self.yearly == object.yearly else { return false }
      guard self.zip == object.zip else { return false }
      return true
    }

    public static func == (lhs: PublicProfileDto, rhs: PublicProfileDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
