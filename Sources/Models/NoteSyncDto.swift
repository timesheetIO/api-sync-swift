//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class NoteSyncDto: APIModel {

    public var created: Int?

    public var dateTime: String?

    public var deleted: Bool?

    public var driveId: String?

    public var id: String?

    public var lastUpdate: Int?

    public var taskId: String?

    public var text: String?

    public var uri: String?

    public var user: String?

    public init(created: Int? = nil, dateTime: String? = nil, deleted: Bool? = nil, driveId: String? = nil, id: String? = nil, lastUpdate: Int? = nil, taskId: String? = nil, text: String? = nil, uri: String? = nil, user: String? = nil) {
        self.created = created
        self.dateTime = dateTime
        self.deleted = deleted
        self.driveId = driveId
        self.id = id
        self.lastUpdate = lastUpdate
        self.taskId = taskId
        self.text = text
        self.uri = uri
        self.user = user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        created = try container.decodeIfPresent("created")
        dateTime = try container.decodeIfPresent("dateTime")
        deleted = try container.decodeIfPresent("deleted")
        driveId = try container.decodeIfPresent("driveId")
        id = try container.decodeIfPresent("id")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        taskId = try container.decodeIfPresent("taskId")
        text = try container.decodeIfPresent("text")
        uri = try container.decodeIfPresent("uri")
        user = try container.decodeIfPresent("user")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(dateTime, forKey: "dateTime")
        try container.encodeIfPresent(deleted, forKey: "deleted")
        try container.encodeIfPresent(driveId, forKey: "driveId")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(taskId, forKey: "taskId")
        try container.encodeIfPresent(text, forKey: "text")
        try container.encodeIfPresent(uri, forKey: "uri")
        try container.encodeIfPresent(user, forKey: "user")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? NoteSyncDto else { return false }
      guard self.created == object.created else { return false }
      guard self.dateTime == object.dateTime else { return false }
      guard self.deleted == object.deleted else { return false }
      guard self.driveId == object.driveId else { return false }
      guard self.id == object.id else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.taskId == object.taskId else { return false }
      guard self.text == object.text else { return false }
      guard self.uri == object.uri else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: NoteSyncDto, rhs: NoteSyncDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
