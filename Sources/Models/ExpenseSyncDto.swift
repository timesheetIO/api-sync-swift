//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ExpenseSyncDto: APIModel {

    public var amount: Double?

    public var created: Int?

    public var dateTime: String?

    public var deleted: Bool?

    public var description: String?

    public var id: String?

    public var lastUpdate: Int?

    public var refunded: Bool?

    public var taskId: String?

    public var user: String?

    public init(amount: Double? = nil, created: Int? = nil, dateTime: String? = nil, deleted: Bool? = nil, description: String? = nil, id: String? = nil, lastUpdate: Int? = nil, refunded: Bool? = nil, taskId: String? = nil, user: String? = nil) {
        self.amount = amount
        self.created = created
        self.dateTime = dateTime
        self.deleted = deleted
        self.description = description
        self.id = id
        self.lastUpdate = lastUpdate
        self.refunded = refunded
        self.taskId = taskId
        self.user = user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        amount = try container.decodeIfPresent("amount")
        created = try container.decodeIfPresent("created")
        dateTime = try container.decodeIfPresent("dateTime")
        deleted = try container.decodeIfPresent("deleted")
        description = try container.decodeIfPresent("description")
        id = try container.decodeIfPresent("id")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        refunded = try container.decodeIfPresent("refunded")
        taskId = try container.decodeIfPresent("taskId")
        user = try container.decodeIfPresent("user")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(dateTime, forKey: "dateTime")
        try container.encodeIfPresent(deleted, forKey: "deleted")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(refunded, forKey: "refunded")
        try container.encodeIfPresent(taskId, forKey: "taskId")
        try container.encodeIfPresent(user, forKey: "user")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ExpenseSyncDto else { return false }
      guard self.amount == object.amount else { return false }
      guard self.created == object.created else { return false }
      guard self.dateTime == object.dateTime else { return false }
      guard self.deleted == object.deleted else { return false }
      guard self.description == object.description else { return false }
      guard self.id == object.id else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.refunded == object.refunded else { return false }
      guard self.taskId == object.taskId else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: ExpenseSyncDto, rhs: ExpenseSyncDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
