//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AutomationSyncDto: APIModel {

    public var action: Int?

    public var address: String?

    public var beaconUUID: String?

    public var created: Int?

    public var deleted: Bool?

    public var enabled: Bool?

    public var id: String?

    public var lastUpdate: Int?

    public var latitude: Double?

    public var longitude: Double?

    public var projectId: String?

    public var radius: Float?

    public var shared: Bool?

    public var ssid: String?

    public var typeId: Int?

    public var user: String?

    public init(action: Int? = nil, address: String? = nil, beaconUUID: String? = nil, created: Int? = nil, deleted: Bool? = nil, enabled: Bool? = nil, id: String? = nil, lastUpdate: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, projectId: String? = nil, radius: Float? = nil, shared: Bool? = nil, ssid: String? = nil, typeId: Int? = nil, user: String? = nil) {
        self.action = action
        self.address = address
        self.beaconUUID = beaconUUID
        self.created = created
        self.deleted = deleted
        self.enabled = enabled
        self.id = id
        self.lastUpdate = lastUpdate
        self.latitude = latitude
        self.longitude = longitude
        self.projectId = projectId
        self.radius = radius
        self.shared = shared
        self.ssid = ssid
        self.typeId = typeId
        self.user = user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        action = try container.decodeIfPresent("action")
        address = try container.decodeIfPresent("address")
        beaconUUID = try container.decodeIfPresent("beaconUUID")
        created = try container.decodeIfPresent("created")
        deleted = try container.decodeIfPresent("deleted")
        enabled = try container.decodeIfPresent("enabled")
        id = try container.decodeIfPresent("id")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        latitude = try container.decodeIfPresent("latitude")
        longitude = try container.decodeIfPresent("longitude")
        projectId = try container.decodeIfPresent("projectId")
        radius = try container.decodeIfPresent("radius")
        shared = try container.decodeIfPresent("shared")
        ssid = try container.decodeIfPresent("ssid")
        typeId = try container.decodeIfPresent("typeId")
        user = try container.decodeIfPresent("user")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(action, forKey: "action")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(beaconUUID, forKey: "beaconUUID")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(deleted, forKey: "deleted")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(projectId, forKey: "projectId")
        try container.encodeIfPresent(radius, forKey: "radius")
        try container.encodeIfPresent(shared, forKey: "shared")
        try container.encodeIfPresent(ssid, forKey: "ssid")
        try container.encodeIfPresent(typeId, forKey: "typeId")
        try container.encodeIfPresent(user, forKey: "user")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AutomationSyncDto else { return false }
      guard self.action == object.action else { return false }
      guard self.address == object.address else { return false }
      guard self.beaconUUID == object.beaconUUID else { return false }
      guard self.created == object.created else { return false }
      guard self.deleted == object.deleted else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.id == object.id else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.latitude == object.latitude else { return false }
      guard self.longitude == object.longitude else { return false }
      guard self.projectId == object.projectId else { return false }
      guard self.radius == object.radius else { return false }
      guard self.shared == object.shared else { return false }
      guard self.ssid == object.ssid else { return false }
      guard self.typeId == object.typeId else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: AutomationSyncDto, rhs: AutomationSyncDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
