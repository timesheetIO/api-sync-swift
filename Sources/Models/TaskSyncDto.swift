//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TaskSyncDto: APIModel {

    public var billable: Bool?

    public var billed: Bool?

    public var created: Int?

    public var deleted: Bool?

    public var description: String?

    public var distance: Double?

    public var endDateTime: String?

    public var feeling: Int?

    public var id: String?

    public var lastUpdate: Int?

    public var location: String?

    public var locationEnd: String?

    public var paid: Bool?

    public var phoneNumber: String?

    public var projectId: String?

    public var rateId: String?

    public var running: Bool?

    public var signature: String?

    public var startDateTime: String?

    public var typeId: Int?

    public var user: String?

    public init(billable: Bool? = nil, billed: Bool? = nil, created: Int? = nil, deleted: Bool? = nil, description: String? = nil, distance: Double? = nil, endDateTime: String? = nil, feeling: Int? = nil, id: String? = nil, lastUpdate: Int? = nil, location: String? = nil, locationEnd: String? = nil, paid: Bool? = nil, phoneNumber: String? = nil, projectId: String? = nil, rateId: String? = nil, running: Bool? = nil, signature: String? = nil, startDateTime: String? = nil, typeId: Int? = nil, user: String? = nil) {
        self.billable = billable
        self.billed = billed
        self.created = created
        self.deleted = deleted
        self.description = description
        self.distance = distance
        self.endDateTime = endDateTime
        self.feeling = feeling
        self.id = id
        self.lastUpdate = lastUpdate
        self.location = location
        self.locationEnd = locationEnd
        self.paid = paid
        self.phoneNumber = phoneNumber
        self.projectId = projectId
        self.rateId = rateId
        self.running = running
        self.signature = signature
        self.startDateTime = startDateTime
        self.typeId = typeId
        self.user = user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        billable = try container.decodeIfPresent("billable")
        billed = try container.decodeIfPresent("billed")
        created = try container.decodeIfPresent("created")
        deleted = try container.decodeIfPresent("deleted")
        description = try container.decodeIfPresent("description")
        distance = try container.decodeIfPresent("distance")
        endDateTime = try container.decodeIfPresent("endDateTime")
        feeling = try container.decodeIfPresent("feeling")
        id = try container.decodeIfPresent("id")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        location = try container.decodeIfPresent("location")
        locationEnd = try container.decodeIfPresent("locationEnd")
        paid = try container.decodeIfPresent("paid")
        phoneNumber = try container.decodeIfPresent("phoneNumber")
        projectId = try container.decodeIfPresent("projectId")
        rateId = try container.decodeIfPresent("rateId")
        running = try container.decodeIfPresent("running")
        signature = try container.decodeIfPresent("signature")
        startDateTime = try container.decodeIfPresent("startDateTime")
        typeId = try container.decodeIfPresent("typeId")
        user = try container.decodeIfPresent("user")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(billable, forKey: "billable")
        try container.encodeIfPresent(billed, forKey: "billed")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(deleted, forKey: "deleted")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(distance, forKey: "distance")
        try container.encodeIfPresent(endDateTime, forKey: "endDateTime")
        try container.encodeIfPresent(feeling, forKey: "feeling")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(locationEnd, forKey: "locationEnd")
        try container.encodeIfPresent(paid, forKey: "paid")
        try container.encodeIfPresent(phoneNumber, forKey: "phoneNumber")
        try container.encodeIfPresent(projectId, forKey: "projectId")
        try container.encodeIfPresent(rateId, forKey: "rateId")
        try container.encodeIfPresent(running, forKey: "running")
        try container.encodeIfPresent(signature, forKey: "signature")
        try container.encodeIfPresent(startDateTime, forKey: "startDateTime")
        try container.encodeIfPresent(typeId, forKey: "typeId")
        try container.encodeIfPresent(user, forKey: "user")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TaskSyncDto else { return false }
      guard self.billable == object.billable else { return false }
      guard self.billed == object.billed else { return false }
      guard self.created == object.created else { return false }
      guard self.deleted == object.deleted else { return false }
      guard self.description == object.description else { return false }
      guard self.distance == object.distance else { return false }
      guard self.endDateTime == object.endDateTime else { return false }
      guard self.feeling == object.feeling else { return false }
      guard self.id == object.id else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.location == object.location else { return false }
      guard self.locationEnd == object.locationEnd else { return false }
      guard self.paid == object.paid else { return false }
      guard self.phoneNumber == object.phoneNumber else { return false }
      guard self.projectId == object.projectId else { return false }
      guard self.rateId == object.rateId else { return false }
      guard self.running == object.running else { return false }
      guard self.signature == object.signature else { return false }
      guard self.startDateTime == object.startDateTime else { return false }
      guard self.typeId == object.typeId else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: TaskSyncDto, rhs: TaskSyncDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
