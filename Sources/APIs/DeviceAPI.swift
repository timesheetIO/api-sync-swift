//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DeviceAPI {
    /**
     Register device

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerDevice(body: DeviceCreateDto? = nil, completion: @escaping ((_ data: DeviceDto?,_ error: Error?) -> Void)) {
        registerDeviceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register device
     - POST /v1/devices

     - examples: [{contentType=application/json, example={
  "deleted" : true,
  "created" : 6,
  "lastUpdate" : 0,
  "name" : "name",
  "registrationId" : "registrationId",
  "id" : "id",
  "user" : "user"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DeviceDto> 
     */
    open class func registerDeviceWithRequestBuilder(body: DeviceCreateDto? = nil) -> RequestBuilder<DeviceDto> {
        let path = "/v1/devices"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DeviceDto>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Sends sync message

     - parameter regId: (path)  
     - parameter lastSync: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendSyncMessage(regId: String, lastSync: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendSyncMessageWithRequestBuilder(regId: regId, lastSync: lastSync).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sends sync message
     - POST /v1/devices/sendSyncMessageToOtherDevices/{regId}/{lastSync}

     - parameter regId: (path)  
     - parameter lastSync: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func sendSyncMessageWithRequestBuilder(regId: String, lastSync: Int64) -> RequestBuilder<Void> {
        var path = "/v1/devices/sendSyncMessageToOtherDevices/{regId}/{lastSync}"
        let regIdPreEscape = "\(regId)"
        let regIdPostEscape = regIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{regId}", with: regIdPostEscape, options: .literal, range: nil)
        let lastSyncPreEscape = "\(lastSync)"
        let lastSyncPostEscape = lastSyncPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lastSync}", with: lastSyncPostEscape, options: .literal, range: nil)
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Sync device

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncDeviceNow(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncDeviceNowWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sync device
     - POST /v1/devices/syncNow/{id}

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func syncDeviceNowWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/devices/syncNow/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Unregister device

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unregisterDevice(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unregisterDeviceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unregister device
     - DELETE /v1/devices/{id}

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func unregisterDeviceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/devices/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
