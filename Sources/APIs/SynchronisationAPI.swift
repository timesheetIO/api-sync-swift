//
// SynchronisationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SynchronisationAPI {
    /**
     Update SyncState

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func finishedSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        finishedSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update SyncState
     - POST /v1/sync/finishedSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func finishedSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/finishedSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get expenses

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExpenseSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getExpenseSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get expenses
     - GET /v1/sync/getExpenseSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getExpenseSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getExpenseSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get notes

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNoteSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getNoteSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get notes
     - GET /v1/sync/getNoteSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getNoteSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getNoteSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get pauses

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPauseSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getPauseSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get pauses
     - GET /v1/sync/getPauseSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getPauseSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getPauseSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get project members

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMemberSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getProjectMemberSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get project members
     - GET /v1/sync/getProjectMemberSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getProjectMemberSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getProjectMemberSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get projects

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getProjectSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get projects
     - GET /v1/sync/getProjectSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getProjectSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getProjectSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get rates

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRateSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getRateSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rates
     - GET /v1/sync/getRateSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getRateSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getRateSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get SyncState

     - parameter syncState: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStateSyncData(syncState: Int64, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getStateSyncDataWithRequestBuilder(syncState: syncState).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get SyncState
     - GET /v1/sync/getStateSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getStateSyncDataWithRequestBuilder(syncState: Int64) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getStateSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get tags

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTagSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get tags
     - GET /v1/sync/getTagSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTagSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTagSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get tasks

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTaskSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get tasks
     - GET /v1/sync/getTaskSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTaskSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTaskSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get TaskTags

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskTagSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTaskTagSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get TaskTags
     - GET /v1/sync/getTaskTagSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTaskTagSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTaskTagSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get team members

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMemberSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTeamMemberSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get team members
     - GET /v1/sync/getTeamMemberSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTeamMemberSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTeamMemberSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get teams

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTeamSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get teams
     - GET /v1/sync/getTeamSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTeamSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTeamSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get todos

     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTodoSyncData(syncState: Int64, limit: Int, offset: Int, completion: @escaping ((_ data: SyncData?,_ error: Error?) -> Void)) {
        getTodoSyncDataWithRequestBuilder(syncState: syncState, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get todos
     - GET /v1/sync/getTodoSyncData

     - examples: [{contentType=application/json, example={
  "expenseCount" : 1,
  "noteState" : 7,
  "projectCount" : 1,
  "projects" : [ {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  }, {
    "color" : 6,
    "taskDefaultBillable" : true,
    "created" : 3,
    "description" : "description",
    "office" : "office",
    "title" : "title",
    "salary" : 1.284659006116532,
    "archived" : true,
    "deleted" : true,
    "lastUpdate" : 6,
    "teamId" : "teamId",
    "employer" : "employer",
    "id" : "id",
    "taskDefaultRateId" : "taskDefaultRateId",
    "user" : "user"
  } ],
  "notes" : [ {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "deleted" : true,
    "driveId" : "driveId",
    "created" : 3,
    "lastUpdate" : 3,
    "id" : "id",
    "text" : "text",
    "user" : "user",
    "uri" : "uri",
    "taskId" : "taskId"
  } ],
  "projectMemberState" : 1,
  "teamCount" : 6,
  "todoCount" : 1,
  "teamMembers" : [ {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 7,
    "teamId" : "teamId",
    "lastUpdate" : 0,
    "permission" : 9,
    "id" : "id",
    "user" : "user"
  } ],
  "deviceId" : "deviceId",
  "teamMemberState" : 7,
  "pauses" : [ {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "created" : 0,
    "lastUpdate" : 6,
    "description" : "description",
    "id" : "id",
    "endDateTime" : "endDateTime",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "taskState" : 5,
  "rateCount" : 9,
  "taskTagState" : 3,
  "tagState" : 9,
  "pauseCount" : 7,
  "projectMembers" : [ {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  }, {
    "deleted" : true,
    "created" : 6,
    "teamId" : "teamId",
    "lastUpdate" : 4,
    "permission" : 5,
    "id" : "id",
    "projectId" : "projectId",
    "user" : "user"
  } ],
  "tasks" : [ {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  }, {
    "distance" : 7.058770351582356,
    "signature" : "signature",
    "created" : 3,
    "description" : "description",
    "feeling" : 7,
    "endDateTime" : "endDateTime",
    "locationEnd" : "locationEnd",
    "billable" : true,
    "rateId" : "rateId",
    "running" : true,
    "deleted" : true,
    "startDateTime" : "startDateTime",
    "billed" : true,
    "phoneNumber" : "phoneNumber",
    "lastUpdate" : 3,
    "paid" : true,
    "location" : "location",
    "typeId" : 0,
    "id" : "id",
    "todoId" : "todoId",
    "user" : "user",
    "projectId" : "projectId"
  } ],
  "expenseState" : 2,
  "projectMemberCount" : 9,
  "teams" : [ {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  }, {
    "image" : "image",
    "deleted" : true,
    "color" : 7,
    "created" : 0,
    "lastUpdate" : 9,
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "user" : "user"
  } ],
  "syncState" : 0,
  "noteCount" : 4,
  "rates" : [ {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  }, {
    "deleted" : true,
    "created" : 4,
    "extra" : 4.258773108174356,
    "teamId" : "teamId",
    "lastUpdate" : 1,
    "id" : "id",
    "title" : "title",
    "factor" : 6.628464275087742,
    "user" : "user",
    "enabled" : true
  } ],
  "teamState" : 4,
  "teamMemberCount" : 8,
  "todoState" : 1,
  "rateState" : 2,
  "projectState" : 6,
  "tags" : [ {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  }, {
    "deleted" : true,
    "color" : 3,
    "created" : 5,
    "lastUpdate" : 7,
    "teamId" : "teamId",
    "name" : "name",
    "id" : "id",
    "user" : "user"
  } ],
  "taskCount" : 6,
  "taskTags" : [ {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "deleted" : true,
    "tagId" : "tagId",
    "created" : 0,
    "lastUpdate" : 4,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ],
  "tagCount" : 5,
  "todos" : [ {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  }, {
    "created" : 6,
    "dueDate" : "dueDate",
    "description" : "description",
    "assignedUsers" : "assignedUsers",
    "estimatedMinutes" : 6,
    "deleted" : true,
    "lastUpdate" : 2,
    "name" : "name",
    "estimatedHours" : 5,
    "id" : "id",
    "user" : "user",
    "projectId" : "projectId",
    "status" : 6
  } ],
  "pauseState" : 5,
  "taskTagCount" : 9,
  "expenses" : [ {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  }, {
    "dateTime" : "dateTime",
    "amount" : 7.740351818741173,
    "deleted" : true,
    "created" : 8,
    "lastUpdate" : 4,
    "description" : "description",
    "refunded" : true,
    "id" : "id",
    "user" : "user",
    "taskId" : "taskId"
  } ]
}}]
     - parameter syncState: (query)  
     - parameter limit: (query)  
     - parameter offset: (query)  

     - returns: RequestBuilder<SyncData> 
     */
    open class func getTodoSyncDataWithRequestBuilder(syncState: Int64, limit: Int, offset: Int) -> RequestBuilder<SyncData> {
        let path = "/v1/sync/getTodoSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "syncState": syncState.encodeToJSON(), 
                        "limit": limit.encodeToJSON(), 
                        "offset": offset.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SyncData>.Type = TimesheetSyncAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update expenses

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExpenseSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postExpenseSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update expenses
     - POST /v1/sync/postExpenseSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postExpenseSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postExpenseSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update notes.

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNoteSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNoteSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update notes.
     - POST /v1/sync/postNoteSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postNoteSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postNoteSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update pauses

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPauseSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPauseSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update pauses
     - POST /v1/sync/postPauseSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postPauseSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postPauseSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update project members

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProjectMemberSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postProjectMemberSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update project members
     - POST /v1/sync/postProjectMemberSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postProjectMemberSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postProjectMemberSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update projects

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProjectSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postProjectSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update projects
     - POST /v1/sync/postProjectSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postProjectSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postProjectSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update rates

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRateSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postRateSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update rates
     - POST /v1/sync/postRateSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postRateSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postRateSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update tags

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTagSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTagSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update tags
     - POST /v1/sync/postTagSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTagSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTagSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update tasks

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTaskSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update tasks
     - POST /v1/sync/postTaskSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTaskSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTaskSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update TaskTags

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskTagSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTaskTagSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update TaskTags
     - POST /v1/sync/postTaskTagSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTaskTagSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTaskTagSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update team members

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeamMemberSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTeamMemberSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update team members
     - POST /v1/sync/postTeamMemberSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTeamMemberSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTeamMemberSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update teams

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeamSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTeamSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update teams
     - POST /v1/sync/postTeamSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTeamSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTeamSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update todos

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTodoSyncData(body: SyncData? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTodoSyncDataWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update todos
     - POST /v1/sync/postTodoSyncData

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTodoSyncDataWithRequestBuilder(body: SyncData? = nil) -> RequestBuilder<Void> {
        let path = "/v1/sync/postTodoSyncData"
        let URLString = TimesheetSyncAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = TimesheetSyncAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
